#include<iostream>
#include<vector>
#include<fstream>
#include<stdlib.h>
#include<string.h>
#include <dirent.h>
#include <sys/stat.h>
#include "Markup.h"
#include "dataStruc.h"
#include <sstream>

class chunkMap
{
    private:
        int numMaps;
        int chunkSize;
        string inputDir;
        DataType dataType;
        vector<ChunkInfo> chunks;
        vector<FileSize> fileSizes;
        
    public:
    
    void readChunks(string xmlFile)
    {
        CMarkup xml;
        bool bSuccess = xml.Load(xmlFile);
        xml.FindElem("CHUNKMAP");
        xml.IntoElem();
        int i=0,j=0;
        
        while (xml.FindElem("CHUNK") )
        {
            ChunkInfo data;
            xml.IntoElem();
            xml.FindElem("Number");
            data.assignedTo= atoi( MCD_2PCSZ(xml.GetData()) );
            xml.FindElem("Size" );
            data.size = atoi( MCD_2PCSZ(xml.GetData()) );
            xml.FindElem("Files");
            xml.IntoElem();
            while(xml.FindElem("File"))
            {
                FileInfo fi;
                xml.IntoElem();
                xml.FindElem("Path");
                fi.path=xml.GetData();
                xml.FindElem("StartByte");
                fi.startByte= atoi( MCD_2PCSZ(xml.GetData()));
                xml.FindElem("EndByte" );
                fi.endByte = atoi( MCD_2PCSZ(xml.GetData()));
                xml.OutOfElem();
                data.chunk.push_back(fi);
            }    
            xml.OutOfElem();
            xml.OutOfElem();
            chunks.push_back(data);
            i++;
        }        
    }
    
    void saveChunks(string outFilePath)
    {
        CMarkup xml;
        xml.AddElem( "CHUNKMAP");
        xml.IntoElem();
        
        int sz=chunks.size();
        for(int i=0;i<sz;i++)
        {
            int size=chunks[i].chunk.size(); 
            xml.AddElem( "CHUNK");       
            xml.IntoElem();
            xml.AddElem("Number",itos(i+1));
            xml.AddElem( "Size",itos(chunks[i].size));  
            xml.AddElem("Files"); 
            xml.IntoElem();            

            for(int j=0;j<size;j++)
            {
                xml.AddElem("File");
                xml.IntoElem();
                xml.AddElem( "Path",chunks[i].chunk[j].path);     
                xml.AddElem( "StartByte",itos(chunks[i].chunk[j].startByte));   
                xml.AddElem( "EndByte",itos(chunks[i].chunk[j].endByte)); 
                xml.OutOfElem();  
            }      
            xml.OutOfElem();
            xml.OutOfElem();

        }    
        xml.OutOfElem();
        xml.Save( outFilePath);   
    }    
    
};
int main()
{
    chunkMap obj = chunkMap();
    obj.readChunks("/home/himanshu/Desktop/BTPCode/chunkMap.xml");
    obj.saveChunks("/home/himanshu/Desktop/BTPCode/testChunks.xml");
    return 0;
}

